#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import sys

from drenv import temporary_kubeconfig
from drenv import commands
from drenv import kubectl


def deploy_guestbook(cluster):
    print(
        f"Deploying application guestbook in namespace argocd-test on cluster {cluster}"
    )
    # need use KUBECONFIG env, switch to hub cluster argocd ns first,
    # otherwise will hit argocd command bug
    # see https://github.com/argoproj/argo-cd/issues/14167
    with temporary_kubeconfig("drenv-argocd-test.") as env:
        kubeconfig = env["KUBECONFIG"]
        kubectl.config("use-context", hub, "--kubeconfig", kubeconfig)
        kubectl.config(
            "set-context",
            "--current",
            "--namespace=argocd",
            "--kubeconfig",
            kubeconfig,
        )

        for line in commands.watch(
            "argocd",
            "app",
            "create",
            "guestbook",
            "--repo=https://github.com/argoproj/argocd-example-apps.git",
            "--path=guestbook",
            "--dest-server=https://kubernetes.default.svc",
            "--dest-namespace=argocd-test",
            "--sync-option=CreateNamespace=true",
            "--sync-policy=automated",
            env=env,
        ):
            print(line)


def wait_until_guestbook_is_healthy(cluster):
    print("Waiting application guestbook to be healthy")
    kubectl.wait(
        "application",
        "guestbook",
        "--for=jsonpath={.status.health.status}=Healthy",
        "--namespace=argocd",
        "--timeout=60s",
        context=cluster,
    )


def undeploy_guestbook(cluster):
    print("Deleting application guestbook")
    # need use KUBECONFIG env, switch to hub cluster argocd ns first,
    # otherwise will hit argocd command bug
    # see https://github.com/argoproj/argo-cd/issues/14167
    with temporary_kubeconfig("drenv-argocd-test.") as env:
        kubeconfig = env["KUBECONFIG"]
        kubectl.config("use-context", hub, "--kubeconfig", kubeconfig)
        kubectl.config(
            "set-context",
            "--current",
            "--namespace=argocd",
            "--kubeconfig",
            kubeconfig,
        )

        for line in commands.watch(
            "argocd", "app", "delete", "guestbook", "--yes", "--wait", env=env
        ):
            print(line)

    kubectl.delete("namespace", "argocd-test", context=cluster)


if len(sys.argv) != 4:
    print(f"Usage: {sys.argv[0]} hub cluster1 cluster2")
    sys.exit(1)

hub = sys.argv[1]

deploy_guestbook(hub)
wait_until_guestbook_is_healthy(hub)
undeploy_guestbook(hub)
