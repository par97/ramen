#!/usr/bin/env python3

# SPDX-FileCopyrightText: The RamenDR authors
# SPDX-License-Identifier: Apache-2.0

import os
import sys
import tempfile
import subprocess

from drenv import kubectl
from drenv import cache


def deploy_argocd(cluster):
    print("Deploying argocd")
    path = cache.path("addons/argocd-2.11.yaml")
    cache.fetch(".", path)
    kubectl.apply("--filename", path, "--namespace", "argocd", context=cluster)


def wait_for_deployments(cluster):
    print("Waiting until all deployments are available")
    kubectl.wait(
        "deploy",
        "--all",
        "--for=condition=Available",
        "--namespace=argocd",
        "--timeout=300s",
        context=cluster,
    )


def add_clusters(hub, clusters):
    # Need switch to hub cluster argocd ns first, otherwise will hit argocd bug
    # see https://github.com/argoproj/argo-cd/issues/14167
    with tempfile.TemporaryDirectory(prefix="drenv-argocd.") as tmpdir:
        # Create a temporary kubeconfig so we don't modify the shared config
        # used by other addons concurrently.
        kubeconfig = os.path.join(tmpdir, "kubeconfig")

        print(f"Creating temporary kubeconfig {kubeconfig}")
        out = kubectl.config("view", "--flatten", "--output=yaml")
        with open(kubeconfig, "w") as f:
            f.write(out)
        kubectl.config("use-context", f"--kubeconfig={kubeconfig}", hub)
        kubectl.config(
            "set-context",
            f"--kubeconfig={kubeconfig}",
            "--current",
            "--namespace=argocd",
        )

        # Create an environemnt so we can pass the kubeconfig to argocd.
        env = dict(os.environ)
        env["KUBECONFIG"] = kubeconfig

        # The follwoing commands use subprocess.run since commamnds.run/watch
        # do not support setting child process environment.
        # TODO: add env argumnet to commands.run/watch.

        print("Logging in to argocd server on hub")
        subprocess.run(["argocd", "login", "--core"], check=True, env=env)

        for name in clusters:
            print(f"Adding cluster '{name}' to argocd")
            cmd = ["argocd", "cluster", "add", name, "--yes"]
            cp = subprocess.run(cmd, stderr=subprocess.PIPE, env=env)
            if cp.returncode != 0:
                # ignore known error "NOAUTH" with "argocd cluster add" after
                # "argocd login --core", see bug
                # https://github.com/argoproj/argo-cd/issues/18464
                stderr = cp.stderr.decode()
                if cp.returncode != 20 or "NOAUTH" not in stderr:
                    raise RuntimeError(f"Error running {cmd}: {stderr}")


if len(sys.argv) != 4:
    print(f"Usage: {sys.argv[0]} hub cluster1 cluster2")
    sys.exit(1)

os.chdir(os.path.dirname(__file__))
hub = sys.argv[1]
clusters = [sys.argv[2], sys.argv[3]]

deploy_argocd(hub)
wait_for_deployments(hub)
add_clusters(hub, clusters)
